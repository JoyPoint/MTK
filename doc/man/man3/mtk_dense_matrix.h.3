.TH "include/mtk_dense_matrix.h" 3 "Wed Nov 18 2015" "MTK: Mimetic Methods Toolkit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/mtk_dense_matrix.h \- 
.PP
Defines a common dense matrix, using a 1D array\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include 'mtk_roots\&.h'\fP
.br
\fC#include 'mtk_enums\&.h'\fP
.br
\fC#include 'mtk_matrix\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBmtk::DenseMatrix\fP"
.br
.RI "\fIDefines a common dense matrix, using a 1D array\&. \fP"
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBmtk\fP"
.br
.RI "\fIMimetic Methods Toolkit namespace\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
For developing purposes, it is better to have a not-so-intrincated data structure implementing matrices\&. This is the purpose of this class: to be used for prototypes of new code for small test cases\&. In every other instance, this should be replaced by the most appropriate sparse matrix\&.
.PP
\fBAuthor:\fP
.RS 4
: Eduardo J\&. Sanchez (ejspeiro) - esanchez at mail dot sdsu dot edu
.RE
.PP
\fBNote:\fP
.RS 4
We prefer composition to inheritance [Reedy, 2011]\&. The main reason for this preference is that inheritance produces a more tightly coupled design\&. When a class inherits from another type be it public, protected, or private inheritance the subclass gains access to all public and protected members of the base class, whereas with composition, the class is only coupled to the public members of the other class\&. Furthermore, if you only hold a pointer to the other object, then your interface can use a forward declaration of the class rather than #include its full definition\&. This results in greater compile-time insulation and improves the time it takes to compile your code\&. 
.RE
.PP

.PP
Definition in file \fBmtk_dense_matrix\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for MTK: Mimetic Methods Toolkit from the source code\&.
