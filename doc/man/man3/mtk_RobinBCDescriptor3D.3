.TH "mtk::RobinBCDescriptor3D" 3 "Tue Mar 22 2016" "MTK: Mimetic Methods Toolkit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mtk::RobinBCDescriptor3D \- 
.PP
Impose Robin boundary conditions on the operators and on the grids\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <mtk_robin_bc_descriptor_3d\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRobinBCDescriptor3D\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fBRobinBCDescriptor3D\fP (const \fBRobinBCDescriptor3D\fP &desc)"
.br
.RI "\fICopy constructor\&. \fP"
.ti -1c
.RI "\fB~RobinBCDescriptor3D\fP () noexcept"
.br
.RI "\fIDestructor\&. \fP"
.ti -1c
.RI "int \fBhighest_order_diff_west\fP () const noexcept"
.br
.RI "\fIGetter for highest order of differentiation in the * face\&. \fP"
.ti -1c
.RI "void \fBPushBackWestCoeff\fP (\fBCoefficientFunction2D\fP cw)"
.br
.RI "\fIPush back coefficient function at west lowest order diff\&. available\&. \fP"
.ti -1c
.RI "void \fBset_west_condition\fP (\fBReal\fP(*west_condition)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)) noexcept"
.br
.RI "\fISet boundary condition at west\&. \fP"
.ti -1c
.RI "bool \fBImposeOnLaplacianMatrix\fP (const \fBLap3D\fP &lap, const \fBUniStgGrid3D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the operator represented as matrix\&. \fP"
.ti -1c
.RI "void \fBImposeOnGrid\fP (\fBUniStgGrid3D\fP &grid, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the grid\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "bool \fBImposeOnSouthBoundaryNoSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the south boundary\&. \fP"
.ti -1c
.RI "bool \fBImposeOnNorthBoundaryNoSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the north boundary\&. \fP"
.ti -1c
.RI "bool \fBImposeOnWestBoundaryNoSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the west boundary\&. \fP"
.ti -1c
.RI "bool \fBImposeOnEastBoundaryNoSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the east boundary\&. \fP"
.ti -1c
.RI "bool \fBImposeOnSouthBoundaryWithSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the south boundary\&. \fP"
.ti -1c
.RI "bool \fBImposeOnNorthBoundaryWithSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the north boundary\&. \fP"
.ti -1c
.RI "bool \fBImposeOnWestBoundaryWithSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the west boundary\&. \fP"
.ti -1c
.RI "bool \fBImposeOnEastBoundaryWithSpace\fP (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time=\fBkZero\fP) const "
.br
.RI "\fIImposes the condition on the east boundary\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBhighest_order_diff_west_\fP"
.br
.RI "\fIHighest order of differentiation west\&. \fP"
.ti -1c
.RI "int \fBhighest_order_diff_east_\fP"
.br
.RI "\fIHighest order of differentiation east\&. \fP"
.ti -1c
.RI "int \fBhighest_order_diff_south_\fP"
.br
.RI "\fIHighest order differentiation for south\&. \fP"
.ti -1c
.RI "int \fBhighest_order_diff_north_\fP"
.br
.RI "\fIHighest order differentiation for north\&. \fP"
.ti -1c
.RI "int \fBhighest_order_diff_bottom_\fP"
.br
.RI "\fIHighest order differentiation bottom\&. \fP"
.ti -1c
.RI "int \fBhighest_order_diff_top_\fP"
.br
.RI "\fIHighest order differentiation for top\&. \fP"
.ti -1c
.RI "std::vector
.br
< \fBCoefficientFunction2D\fP > \fBwest_coefficients_\fP"
.br
.RI "\fICoeffs\&. west\&. \fP"
.ti -1c
.RI "std::vector
.br
< \fBCoefficientFunction2D\fP > \fBeast_coefficients_\fP"
.br
.RI "\fICoeffs\&. east\&. \fP"
.ti -1c
.RI "std::vector
.br
< \fBCoefficientFunction2D\fP > \fBsouth_coefficients_\fP"
.br
.RI "\fICoeffs\&. south\&. \fP"
.ti -1c
.RI "std::vector
.br
< \fBCoefficientFunction2D\fP > \fBnorth_coefficients_\fP"
.br
.RI "\fICoeffs\&. north\&. \fP"
.ti -1c
.RI "std::vector
.br
< \fBCoefficientFunction2D\fP > \fBbottom_coefficients_\fP"
.br
.RI "\fICoeffs\&. bottom\&. \fP"
.ti -1c
.RI "std::vector
.br
< \fBCoefficientFunction2D\fP > \fBtop_coefficients_\fP"
.br
.RI "\fICoeffs\&. top\&. \fP"
.ti -1c
.RI "\fBReal\fP(* \fBwest_condition_\fP )(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)"
.br
.RI "\fICondition west\&. \fP"
.ti -1c
.RI "\fBReal\fP(* \fBeast_condition_\fP )(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)"
.br
.RI "\fICondition east\&. \fP"
.ti -1c
.RI "\fBReal\fP(* \fBsouth_condition_\fP )(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)"
.br
.RI "\fICond\&. south\&. \fP"
.ti -1c
.RI "\fBReal\fP(* \fBnorth_condition_\fP )(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)"
.br
.RI "\fICond\&. north\&. \fP"
.ti -1c
.RI "\fBReal\fP(* \fBbottom_condition_\fP )(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)"
.br
.RI "\fICond\&. bottom\&. \fP"
.ti -1c
.RI "\fBReal\fP(* \fBtop_condition_\fP )(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)"
.br
.RI "\fICond\&. top\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This class presents an interface for the user to specify Robin boundary conditions on 3D mimetic operators and the grids they are acting on\&.
.PP
\fBDef\&.\fP Let $ u(\mathbf{x},t):\Omega\times [t_0, t_n]\mapsto\mathbb{R} $ be the solution to an ordinary or partial differential equation of interest\&. We say that $ u $ satisfies a \fBRobin boundary condition on\fP $ \partial\Omega $ if and only if there exists $ \beta(\mathbf{x},t):\Omega\times [t_0, t_n]\mapsto\mathbb{R} $ so that: \[ \forall t \in [t_0,t_n]\; \forall \mathbf{x} \in \partial\Omega: \delta(\mathbf{x},t)u(\mathbf{x},t) + \eta(\mathbf{x},t)(\hat{\mathbf{n}}\cdot\nabla u) = \beta(\mathbf{x},t). \]
.PP
Intuitively, a \fBRobin boundary condition\fP is a constraint that must be satisfied by any linear combination of any scalar field $ u $ and its first normal derivative, in order for $ u $ to represent a unique solution to a given ordinary or partial differential equation of interest\&.
.PP
Instances of this class receive information about the coefficient functions and each condition for any subset of the boundary\&. These instances then handle the complexity of placing the coefficients in the differentiation matrices and the conditions in the grids\&.
.PP
\fBSee also:\fP
.RS 4
http://mathworld.wolfram.com/NormalVector.html 
.RE
.PP

.PP
Definition at line 134 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "mtk::RobinBCDescriptor3D::RobinBCDescriptor3D ()"

.SS "mtk::RobinBCDescriptor3D::RobinBCDescriptor3D (const \fBRobinBCDescriptor3D\fP &desc)"

.PP
\fBParameters:\fP
.RS 4
\fIdesc\fP Given 2D descriptor\&. 
.RE
.PP

.SS "mtk::RobinBCDescriptor3D::~RobinBCDescriptor3D ()\fC [noexcept]\fP"

.SH "Member Function Documentation"
.PP 
.SS "int mtk::RobinBCDescriptor3D::highest_order_diff_west () const\fC [noexcept]\fP"

.PP
\fBReturns:\fP
.RS 4
Integer highest order of differentiation in the * face\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnEastBoundaryNoSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnEastBoundaryWithSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "void mtk::RobinBCDescriptor3D::ImposeOnGrid (\fBUniStgGrid3D\fP &grid, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const"

.PP
\fBParameters:\fP
.RS 4
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnLaplacianMatrix (const \fBLap3D\fP &lap, const \fBUniStgGrid3D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnNorthBoundaryNoSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnNorthBoundaryWithSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnSouthBoundaryNoSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnSouthBoundaryWithSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnWestBoundaryNoSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "bool mtk::RobinBCDescriptor3D::ImposeOnWestBoundaryWithSpace (const \fBLap2D\fP &lap, const \fBUniStgGrid2D\fP &grid, \fBDenseMatrix\fP &matrix, const \fBReal\fP &time = \fC\fBkZero\fP\fP) const\fC [private]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIlap\fP Laplacian operator on the matrix\&. 
.br
\fIgrid\fP Grid upon which impose the desired boundary condition\&. 
.br
\fImatrix\fP Input matrix with the Laplacian operator\&. 
.br
\fItime\fP Current time snapshot\&. Default is kZero\&. 
.RE
.PP

.SS "void mtk::RobinBCDescriptor3D::PushBackWestCoeff (\fBCoefficientFunction2D\fPcw)"

.PP
\fBParameters:\fP
.RS 4
\fIcw\fP Coeff\&. $ c_w(x,y,t):\partial\Omega\times[t_0,t_n]\mapsto\mathbb{R} $\&. 
.RE
.PP

.SS "void mtk::RobinBCDescriptor3D::set_west_condition (\fBReal\fP(*)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)west_condition)\fC [noexcept]\fP"

.PP
\fBParameters:\fP
.RS 4
\fIwest_condition\fP $ \beta_w(x,y,t):\partial\Omega\times[t_0,t_n]\mapsto\mathbb{R} $\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "std::vector<\fBCoefficientFunction2D\fP> mtk::RobinBCDescriptor3D::bottom_coefficients_\fC [private]\fP"

.PP
Definition at line 309 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "\fBReal\fP(* mtk::RobinBCDescriptor3D::bottom_condition_)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)\fC [private]\fP"

.PP
Definition at line 324 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "std::vector<\fBCoefficientFunction2D\fP> mtk::RobinBCDescriptor3D::east_coefficients_\fC [private]\fP"

.PP
Definition at line 306 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "\fBReal\fP(* mtk::RobinBCDescriptor3D::east_condition_)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)\fC [private]\fP"

.PP
Definition at line 315 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "int mtk::RobinBCDescriptor3D::highest_order_diff_bottom_\fC [private]\fP"

.PP
Definition at line 302 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "int mtk::RobinBCDescriptor3D::highest_order_diff_east_\fC [private]\fP"

.PP
Definition at line 299 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "int mtk::RobinBCDescriptor3D::highest_order_diff_north_\fC [private]\fP"

.PP
Definition at line 301 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "int mtk::RobinBCDescriptor3D::highest_order_diff_south_\fC [private]\fP"

.PP
Definition at line 300 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "int mtk::RobinBCDescriptor3D::highest_order_diff_top_\fC [private]\fP"

.PP
Definition at line 303 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "int mtk::RobinBCDescriptor3D::highest_order_diff_west_\fC [private]\fP"

.PP
Definition at line 298 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "std::vector<\fBCoefficientFunction2D\fP> mtk::RobinBCDescriptor3D::north_coefficients_\fC [private]\fP"

.PP
Definition at line 308 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "\fBReal\fP(* mtk::RobinBCDescriptor3D::north_condition_)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)\fC [private]\fP"

.PP
Definition at line 321 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "std::vector<\fBCoefficientFunction2D\fP> mtk::RobinBCDescriptor3D::south_coefficients_\fC [private]\fP"

.PP
Definition at line 307 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "\fBReal\fP(* mtk::RobinBCDescriptor3D::south_condition_)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)\fC [private]\fP"

.PP
Definition at line 318 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "std::vector<\fBCoefficientFunction2D\fP> mtk::RobinBCDescriptor3D::top_coefficients_\fC [private]\fP"

.PP
Definition at line 310 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "\fBReal\fP(* mtk::RobinBCDescriptor3D::top_condition_)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)\fC [private]\fP"

.PP
Definition at line 327 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "std::vector<\fBCoefficientFunction2D\fP> mtk::RobinBCDescriptor3D::west_coefficients_\fC [private]\fP"

.PP
Definition at line 305 of file mtk_robin_bc_descriptor_3d\&.h\&.
.SS "\fBReal\fP(* mtk::RobinBCDescriptor3D::west_condition_)(const \fBReal\fP &xx, const \fBReal\fP &yy, const \fBReal\fP &tt)\fC [private]\fP"

.PP
Definition at line 312 of file mtk_robin_bc_descriptor_3d\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for MTK: Mimetic Methods Toolkit from the source code\&.
